/**
 * api-config.js, ApiService.js 추가 전 사용 페이지
 */
import "./App.css";
import Todo from "./Todo";
import React, { useEffect, useState } from "react";
import { Container, List, Paper } from "@mui/material";
import AddTodo from "./AddTodo";

/*
  useEffect를 사용하지 않았을 때의 무한루프
    : 렌더링 -> 컴포넌트 호출 -> App() 함수 호출 -> fetch() -> Todo API 호출(비동기) -> then() -> setItem -> item 상태 초기화 -> 재렌더링 -> App() 호출...
      localhost:3000으로 접속해 network확인해보면 todo를 무한 호출 하고 있음
  useEffect를 사용할 경우
    : 첫 렌더링(마운팅)이 일어났을 때 배열[] 안의 오브젝트 값이 변할 때마다 콜백 함수 호출
      (렌더링 후에 발생하는 효과(Effect))
      -> [items]으로 설정 시 무한루프
*/
function App() {
  // deleteItem 추가 후 테스트를 위해 작성한 useState([...]) 배열을 빈 배열로 초기화
  const [items, setItems] = useState([]);

  // useEffect(콜백함수, 디펜던시 배열)를 사용해 무한루프를 방지하고 처음 리스트 호출
  useEffect(() => {
    // todo API사용해 리스트 초기화
    const requestOptions = {
      method: "GET",
      headers: { "Content-Type": "application/json" },
    };

    // fetch : JSmethod, API서버로 http요청 송신, 수신 지원
    fetch("http://localhost:8080/todo", requestOptions)
    .then((response) => response.json())
    .then(
      (response) => {
        setItems(response.data);
      },
      (error) => {

      }
    );
  }, [])

  // 새로운 Todo 추가
  const addItem = (item) => {
    item.id = "ID-" + items.length; // key를 위한 id
    item.done = false;              // done 초기화

    // 업데이트는 반드시 setItems로 하고 새 배열을 만들어야 한다.
    setItems([...items, item]);     // [...items] : 새 배열 추가
    console.log("items : ", items);
  };

  // Todo 수정
  const editItem = () => {
    setItems([...items]);
  };

  // Todo 삭제
  const deleteItem = (item) => {
    // 삭제할 아이템을 찾는다.
    const newItems = items.filter(e => e.id != item.id);

    // 삭제할 아이템을 제외한 아이템을 다시 배열에 저장한다.
    setItems([...newItems])
  };

  let todoItems = items.length > 0 && (
    <Paper style={{margin: 16}}>
      <List>
        {items.map((item) => (
          <Todo item={item} key={item.id} editItem={editItem} deleteItem={deleteItem} />
        ))}
      </List>
    </Paper>
  );

  return (<div className="App">
      <Container maxWidth="md">
        <AddTodo addItem={addItem} />
        <div className="TodoList">{todoItems}</div>
      </Container>
    </div>);
}

// export default App;
